// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/swagnikdutta/one2n-sre-bootcamp/student (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_store.go -package=mocks github.com/swagnikdutta/one2n-sre-bootcamp/student Store
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	student "github.com/swagnikdutta/one2n-sre-bootcamp/student"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateStudent mocks base method.
func (m *MockStore) CreateStudent(s student.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStudent", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStudent indicates an expected call of CreateStudent.
func (mr *MockStoreMockRecorder) CreateStudent(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudent", reflect.TypeOf((*MockStore)(nil).CreateStudent), s)
}

// DeleteStudent mocks base method.
func (m *MockStore) DeleteStudent(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStudent", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStudent indicates an expected call of DeleteStudent.
func (mr *MockStoreMockRecorder) DeleteStudent(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStudent", reflect.TypeOf((*MockStore)(nil).DeleteStudent), id)
}

// GetStudent mocks base method.
func (m *MockStore) GetStudent(studentId int) (*student.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudent", studentId)
	ret0, _ := ret[0].(*student.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudent indicates an expected call of GetStudent.
func (mr *MockStoreMockRecorder) GetStudent(studentId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudent", reflect.TypeOf((*MockStore)(nil).GetStudent), studentId)
}

// ListStudents mocks base method.
func (m *MockStore) ListStudents() ([]student.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStudents")
	ret0, _ := ret[0].([]student.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStudents indicates an expected call of ListStudents.
func (mr *MockStoreMockRecorder) ListStudents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStudents", reflect.TypeOf((*MockStore)(nil).ListStudents))
}

// UpdateStudent mocks base method.
func (m *MockStore) UpdateStudent(id int, s student.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStudent", id, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStudent indicates an expected call of UpdateStudent.
func (mr *MockStoreMockRecorder) UpdateStudent(id, s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStudent", reflect.TypeOf((*MockStore)(nil).UpdateStudent), id, s)
}
